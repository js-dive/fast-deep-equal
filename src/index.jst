'use strict';

// do not edit .js files directly - edit src/index.jst

function isEqualType(a, b) {
  if (
    a === b
  ) {
    return true
  }
  return [
    typeof a === typeof b,
    (a && Object.getPrototypeOf(a)) === (b && Object.getPrototypeOf(b))
  ].every(function(it) {return it === true})
}

function getToStringTagTypeFromValue(val) {
  const toTagString = Object.prototype.toString.call(val)
  return toTagString.substring('[object '.length, toTagString.length - 1)
}

function hasSameKey(a, b) {
  let keysInA = []
  let keysInB = []

  if (
      ['Array', 'Object'].includes(getToStringTagTypeFromValue(a))
  ) {
      keysInA = [...Object.keys(a), ...Object.getOwnPropertySymbols(a)]
      keysInB = [...Object.keys(b), ...Object.getOwnPropertySymbols(b)]
  }

  let mergedKeySet = new Set([...keysInA, ...keysInB])

  if (mergedKeySet.size !== keysInA.length || mergedKeySet.size !== keysInB.length) {
      return false
  } else {
      return true
  }
}

function hasSameValue(a, b) {
  let keys = [...Object.keys(a), ...Object.getOwnPropertySymbols(a)]
  for (let i = 0; i < keys.length; i++) {
      let k = keys[i]
      if (!internalDeepEqual(a[k], b[k])) {
          return false
      }
  }
  return true
}

function isPrimitiveValue (val) {
  return val === null || !['function', 'object'].includes(typeof val)
}

function internalDeepEqual(a, b) {
  if (a === b) {
      return true
  }
  if (
      isPrimitiveValue(a) && isPrimitiveValue(b) && a !== b
  ) {
      return false
  }
  if (!isEqualType(a, b)) {
      return false
  }
  if (!hasSameKey(a, b)) {
      return false
  }
  if (!hasSameValue(a, b)) {
      return false
  }
  return true
}

module.exports = function equal(a, b) {
  return internalDeepEqual(a, b);
};
